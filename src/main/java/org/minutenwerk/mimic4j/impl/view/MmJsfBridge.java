package org.minutenwerk.mimic4j.impl.view;

import java.net.URI;

import java.util.List;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import org.minutenwerk.mimic4j.impl.MmBaseConfiguration;
import org.minutenwerk.mimic4j.impl.MmBaseImplementation;
import org.minutenwerk.mimic4j.impl.message.MmMessage;

/**
 * The abstract class MmJsfBridge and its descendant classes connect a mimic and a JSF view component. MmJsfBridge implements all methods
 * which are used by any descendant class, but it contains sensible implementations just for the basic cases, which are used by all
 * descendants. All other methods of MmJsfBridge throw an {@link UnsupportedOperationException}. This way the base class MmJsfBridge can be
 * used like an interface.
 *
 * @author  Olaf Kossak
 */
public abstract class MmJsfBridge<IMPLEMENTATION extends MmBaseImplementation<?, ?, ?>, VIEWSIDE_VALUE, MODEL> {

  /** Logger of this class. */
  private static final Logger    LOGGER         = LogManager.getLogger(MmJsfBridge.class);

  /** Reference to implementation part of connected mimic. */
  protected final IMPLEMENTATION implementation;

  /**
   * Creates a new MmJsfBridge instance.
   *
   * @param  pImplementation  The implementation part of connected mimic.
   */
  public MmJsfBridge(IMPLEMENTATION pImplementation) {
    implementation = pImplementation;
  }

  /**
   * A static helper method to evaluate conditions in expression language (EL).
   *
   * @param   pCondition    The condition to be evaluated, must return true or false.
   * @param   pTrueReturn   The object to use in case the condition is true.
   * @param   pFalseReturn  The object to use in case the condition is false.
   *
   * @return  The object to use dependent on condition.
   */
  public static final Object conditionalValue(boolean pCondition, Object pTrueReturn, Object pFalseReturn) {
    return pCondition ? pTrueReturn : pFalseReturn;
  }

  /**
   * Returns an EL expression of type String, which triggers JSF to execute a Java method, usually invoked by a HTML button.
   *
   * @return  An EL expression of type String.
   *
   * @throws  UnsupportedOperationException  In case of the method is not supported by MmJsfBridge and its concrete subclass.
   */
  public String action() {
    throw new UnsupportedOperationException(getClass().getSimpleName() + " does not support JSF tag action");
  }

  /**
   * Compares the id of the mimic and the id of XHTML tag, possibly sets mimic id, and returns the evaluated view id. Following cases can
   * occur:
   *
   * <ul>
   *   <li>Success: mimic id and XHTML id both exist and are identical</li>
   *   <li>Error : mimic id and XHTML id both don't exist: mimic id is undefined, view id is generated by JSF</li>
   *   <li>Error : mimic id and XHTML both exist, but are different: mimic id is used for mimic, but XHTML id is used for JSF view</li>
   *   <li>Warning: mimic id exists, but XHTML id is missing: mimic id is used for JSF view id</li>
   *   <li>Warning: XHTML id exists, but mimic id is missing: XHTML id is used for both JSF view and mimic</li>
   * </ul>
   *
   * @param   pExternalId  The declared XHTML id.
   *
   * @return  The evaluated XHTML id to use.
   */
  public String evalId(String pExternalId) {
    final boolean externalIdMissing = ((pExternalId == null) || pExternalId.trim().isEmpty());
    final boolean externalIdExists  = !externalIdMissing;
    final String  externalId        = externalIdExists ? pExternalId.trim() : "";

    final String  internalId        = implementation.getMmId().trim();
    final boolean internalIdMissing = internalId.isEmpty() || internalId.equals(MmBaseConfiguration.UNDEFINED_ID);
    final boolean internalIdExists  = !internalIdMissing;
    final String  returnID          = internalIdExists ? internalId : (externalIdExists ? externalId : "undefinedIdInMmJsfBridge");

    if (externalIdMissing && internalIdMissing) {
      LOGGER.error("missing id of mimic and of XHTML for: {}", implementation.toString());

    } else if (externalIdMissing && internalIdExists) {
      LOGGER.warn("missing id of XHTML for: {}", implementation.toString());

    } else if (externalIdExists && internalIdMissing) {

      // ATTENTION: sets mimic id to value of XHTML id!
      implementation.getConfiguration().setId(externalId);
      LOGGER.warn("missing id of mimic, set from XHTML for: {}", implementation.toString());

    } else if (externalIdExists && internalIdExists) {
      if (!externalId.equals(internalId)) {
        LOGGER.error("different id of mimic <{}> and of XHTML <{}> for: {}", internalId, externalId, implementation.toString());
      }
    }
    return returnID;
  }

  /**
   * Returns value of JSF tag attribute border.
   *
   * @return  The value of JSF tag attribute border.
   *
   * @throws  UnsupportedOperationException  In case of the method is not supported by MmJsfBridge and its concrete subclass.
   */
  public String getBorder() {
    throw new UnsupportedOperationException(getClass().getSimpleName() + " does not support JSF tag border");
  }

  /**
   * Returns the number of columns of a multiline text field (attribute {@code}cols{@code}).
   *
   * @return  The number of columns of a multiline text field.
   *
   * @throws  UnsupportedOperationException  In case of the method is not supported by MmJsfBridge and its concrete subclass.
   */
  public int getCols() {
    throw new UnsupportedOperationException(getClass().getSimpleName() + " does not support JSF tag cols");
  }

  /**
   * Returns CSS selector for data parents of leporello panel, like in (data-toggle="collapse" data-target="#target1,#target2,#target3").
   *
   * @return  The CSS selector for data parents of leporello panel.
   *
   * @throws  UnsupportedOperationException  In case of the method is not supported by MmJsfBridge and its concrete subclass.
   */
  public String getDataParents() {
    throw new UnsupportedOperationException(getClass().getSimpleName() + " does not support JSF tag dataParents");
  }

  /**
   * Returns the CSS style class of this column's footer.
   *
   * @return  The CSS style class of this column's footer.
   *
   * @throws  UnsupportedOperationException  In case of the method is not supported by MmJsfBridge and its concrete subclass.
   */
  public String getFooterClass() {
    throw new UnsupportedOperationException(getClass().getSimpleName() + " does not support JSF tag footerClass");
  }

  /**
   * Returns the CSS style class of this column's header.
   *
   * @return  The CSS style class of this column's header.
   *
   * @throws  UnsupportedOperationException  In case of the method is not supported by MmJsfBridge and its concrete subclass.
   */
  public String getHeaderClass() {
    throw new UnsupportedOperationException(getClass().getSimpleName() + " does not support JSF tag headerClass");
  }

  /**
   * Returns the text of this column's header title (displayed by mouse over).
   *
   * @return  The text of this column's header title.
   *
   * @throws  UnsupportedOperationException  In case of the method is not supported by MmJsfBridge and its concrete subclass.
   */
  public String getHeaderTitle() {
    throw new UnsupportedOperationException(getClass().getSimpleName() + " does not support JSF tag headerTitle");
  }

  /**
   * Returns the text of this column's header.
   *
   * @return  The text of this column's header.
   *
   * @throws  UnsupportedOperationException  In case of the method is not supported by MmJsfBridge and its concrete subclass.
   */
  public String getHeaderValue() {
    throw new UnsupportedOperationException(getClass().getSimpleName() + " does not support JSF tag headerValue");
  }

  /**
   * Returns id of this mimic. The id is unique within the subtree of a MmRoot.
   *
   * @return  The id of this mimic.
   */
  public String getId() {
    return implementation.getMmId();
  }

  /**
   * Returns the name of JSF tag to be used by this mimic. The JSF tag is usually configured by annotation. Each mimic has a jsf tag for
   * enabled state and a JSF tag for disabled state.
   *
   * @return  The name of JSF tag to be used by this mimic.
   */
  public String getJsfTag() {
    return implementation.getJsfTag();
  }

  /**
   * Returns the label of HTML tag, usually the short description of mimic.
   *
   * @return  The label of HTML tag.
   */
  public String getLabel() {
    return implementation.getMmShortDescription();
  }

  /**
   * Returns the attribute's layout direction in case the attribute is of subtype MmBoolean.
   *
   * @return  The attribute's layout direction.
   *
   * @throws  UnsupportedOperationException  In case of the method is not supported by MmJsfBridge and its concrete subclass.
   */
  public String getLayout() {
    throw new UnsupportedOperationException(getClass().getSimpleName() + " does not support JSF tag layout");
  }

  /**
   * Returns the leporello id, which is used as data parent.
   *
   * @return  The leporello id.
   *
   * @throws  UnsupportedOperationException  In case of the method is not supported by MmJsfBridge and its concrete subclass.
   */
  public String getLeporelloId() {
    throw new UnsupportedOperationException(getClass().getSimpleName() + " does not support JSF tag leporelloId");
  }

  /**
   * Returns the attribute's maximum number of characters for input in view.
   *
   * @return  The attribute's maximum number of characters for input.
   *
   * @throws  UnsupportedOperationException  In case of the method is not supported by MmJsfBridge and its concrete subclass.
   */
  public int getMaxlength() {
    throw new UnsupportedOperationException(getClass().getSimpleName() + " does not support JSF tag maxlength");
  }

  /**
   * Returns a list of {@link MmMessage}, containing error, warning, info and success messages of this mimic.
   *
   * @return  A list of {@link MmMessage}, containing error, warning, info and success messages of this mimic.
   *
   * @throws  UnsupportedOperationException  In case of the method is not supported by MmJsfBridge and its concrete subclass.
   */
  public List<MmMessage> getMsgList() {
    throw new UnsupportedOperationException(getClass().getSimpleName() + " does not support JSF tag msgList");
  }

  /**
   * Returns one string containing all error, warning, info and success messages of this mimic.
   *
   * @return  One string containing all error, warning, info and success messages of this mimic.
   *
   * @throws  UnsupportedOperationException  In case of the method is not supported by MmJsfBridge and its concrete subclass.
   */
  public String getMsgListText() {
    throw new UnsupportedOperationException(getClass().getSimpleName() + " does not support JSF tag msgListText");
  }

  /**
   * Returns the highest severity of error message of this mimic, returns empty string in case of no messages.
   *
   * @return  The highest severity of error message of this mimic.
   *
   * @throws  UnsupportedOperationException  In case of the method is not supported by MmJsfBridge and its concrete subclass.
   */
  public String getMsgMaxSeverity() {
    throw new UnsupportedOperationException(getClass().getSimpleName() + " does not support JSF tag msgMaxSeverity");
  }

  /**
   * Returns the title of error message of highest severity of this mimic.
   *
   * @return  The title of error message of highest severity of this mimic.
   *
   * @throws  UnsupportedOperationException  In case of the method is not supported by MmJsfBridge and its concrete subclass.
   */
  public String getMsgMaxTitle() {
    throw new UnsupportedOperationException(getClass().getSimpleName() + " does not support JSF tag msgMaxTitle");
  }

  /**
   * Returns a self reference of this mimic, either an URL or an outcome.
   *
   * @return  A self reference of this mimic.
   */
  public URI getReference() {
    return implementation.getMmReference();
  }

  /**
   * Returns the number of rows of a multiline text field (attribute {@code}cols{@code}).
   *
   * @return  The number of rows of a multiline text field.
   *
   * @throws  UnsupportedOperationException  In case of the method is not supported by MmJsfBridge and its concrete subclass.
   */
  public int getRows() {
    throw new UnsupportedOperationException(getClass().getSimpleName() + " does not support JSF tag rows");
  }

  /**
   * Returns the attribute's row size of option list in view.
   *
   * @return  The attribute's row size of option list.
   *
   * @throws  UnsupportedOperationException  In case of the method is not supported by MmJsfBridge and its concrete subclass.
   */
  public int getSize() {
    throw new UnsupportedOperationException(getClass().getSimpleName() + " does not support JSF tag size");
  }

  /**
   * Returns the style classes of HTML attribute, as configured and evaluated from mimic. There might be added more style classes from XHTML
   * tag.
   *
   * @return  The style classes of HTML attribute.
   */
  public String getStyleClass() {
    return implementation.getMmStyleClasses();
  }

  /**
   * Returns the CSS style class for initial opening of leporello panel.
   *
   * @return  The CSS style class for initial opening of leporello panel.
   *
   * @throws  UnsupportedOperationException  Because operation is not supported for this mimic.
   */
  public String getStyleInitiallyOpen() {
    throw new UnsupportedOperationException(getClass().getSimpleName() + " does not support JSF tag styleInitiallyOpen");
  }

  /**
   * Returns a target URI.
   *
   * @return  A reference to some target.
   *
   * @throws  UnsupportedOperationException  In case of the method is not supported by MmJsfBridge and its concrete subclass.
   */
  public URI getTargetReference() {
    throw new UnsupportedOperationException(getClass().getSimpleName() + " does not support JSF tag targetReference");
  }

  /**
   * Returns the title attribute of HTML tag, usually the long description of mimic.
   *
   * @return  The title attribute of HTML tag.
   */
  public String getTitle() {
    return implementation.getMmLongDescription();
  }

  /**
   * Returns the value of type VIEWSIDE_VALUE from mimic, to be displayed in HTML tag.
   *
   * @return  The value of type VIEWSIDE_VALUE from mimic, to be displayed in HTML tag.
   *
   * @throws  UnsupportedOperationException  In case of the method is not supported by MmJsfBridge and its concrete subclass.
   */
  public VIEWSIDE_VALUE getValue() {
    throw new UnsupportedOperationException(getClass().getSimpleName() + " does not support JSF tag value");
  }

  /**
   * Returns true, if the HTML tag shall be displayed in disabled state.
   *
   * @return  True, if the HTML tag shall be displayed in disabled state.
   */
  public boolean isDisabled() {
    return !implementation.isMmEnabled() || implementation.isMmReadOnly();
  }

  /**
   * Returns true, if the user's browser has disabled Javascript language.
   *
   * @return  True, if the user's browser has disabled Javascript language.
   */
  public boolean isJsDisabled() {
    return !isJsEnabled();
  }

  /**
   * Returns true, if the user's browser has enabled Javascript language.
   *
   * @return  True, if the user's browser has enabled Javascript language.
   */
  public boolean isJsEnabled() {
    return implementation.isMmJsEnabled();
  }

  /**
   * Returns true, if the leporello panel body shall be displayed.
   *
   * @return  True, if the leporello panel body shall be displayed.
   *
   * @throws  UnsupportedOperationException  Because operation is not supported for this mimic.
   */
  public boolean isPanelBodyVisible() {
    throw new UnsupportedOperationException(getClass().getSimpleName() + " does not support JSF tag isPanelBodyVisible");
  }

  /**
   * Returns true, if the leporello panel heading shall be displayed.
   *
   * @return  True, if the leporello panel heading shall be displayed.
   *
   * @throws  UnsupportedOperationException  Because operation is not supported for this mimic.
   */
  public boolean isPanelHeadingVisible() {
    throw new UnsupportedOperationException(getClass().getSimpleName() + " does not support JSF tag isPanelHeadingVisible");
  }

  /**
   * Returns true, if the HTML tag shall be displayed.
   *
   * @return  True, if the HTML tag shall be displayed.
   */
  public boolean isRendered() {
    return implementation.isMmVisible();
  }

  /**
   * Returns true, if this column is a row header column of the table.
   *
   * @return  True, if this column is a row header column of the table.
   *
   * @throws  UnsupportedOperationException  In case of the method is not supported by MmJsfBridge and its concrete subclass.
   */
  public boolean isRowHeader() {
    throw new UnsupportedOperationException(getClass().getSimpleName() + " does not support JSF tag rowHeader");
  }

  /**
   * Returns true, if special characters in displayed text content shall by escaped.
   *
   * @return  True, if special characters in displayed text content shall by escaped.
   *
   * @throws  UnsupportedOperationException  In case of the method is not supported by MmJsfBridge and its concrete subclass.
   */
  public boolean isTextEscape() {
    throw new UnsupportedOperationException(getClass().getSimpleName() + " does not support JSF tag textEscape");
  }

  /**
   * Sets the value of type VIEWSIDE_VALUE into mimic, usually called by input HTML tags.
   *
   * @param   pValue  The value of type VIEWSIDE_VALUE to be set.
   *
   * @throws  UnsupportedOperationException  In case of the method is not supported by MmJsfBridge and its concrete subclass.
   */
  public void setValue(VIEWSIDE_VALUE pValue) {
    throw new UnsupportedOperationException(getClass().getSimpleName() + " does not support JSF tag setValue");
  }

}
