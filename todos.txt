todos:

* In MmMimic   public MmReference getMmReference(MmReferencableModel pModel); entfernen
* Für MmExecutableMimic Reference auf Java Function übergeben und speichern
* 
* alle Parameterpräfixe entfernen?
* alle Parameter final machen?
* alle assert entfernen!

* placeholder mit namespace passthrough in tags implementieren
* in MmMimic getMmPlaceholder aufnehmen?
* tags aufräumen!
* Meldung anzeigen
* Fehler auf Tab anzeigen
* In Dto.getInfo() auch i18n von Enum-Werten erlauben und anzeigen
* In Dto.getInfo() auch Konvertierung von Zahlen und Datum?
* Dto.getInfo() mit getFormat() implementieren?
* Einheiten?
* Eingabeformat als Suffix anzeigen? 
* Multi format converter
* EnumNullOption title
* Textareas!
* Checkboxes und Radiobuttons mit input-group-addon http://getbootstrap.com/components/#input-groups-checkboxes-radios

* TabSet und Tab
* Links auf Tabs
* Conversation Controller refactoring
* All MmTabs als Spring beans
* Wie Tab mit PageController verbinden?
* MmSubRoot: muß RequestController implementieren
* MmComponent: muß Jaquama-Component implementieren
* unit tests
* Commands
* Toolbar ?
* Für Jsf type SelectOneCheckboxDisabled icon-class konfigurierbar machen

* Jedes mimic verfügt über eine Selbstreferenz, d.h. über seine eigene URL.
* Eine URL besteht aus drei Teilen: dem href, dem text und dem title
* Der href besteht aus: path + file + "#" + anchor + "?" + query

* Eine URL hat einen fixen und einen variablen Teil:
* Der fixe Teil einer URL ist: path + file , oder wenn ein anchor existiert: path + file + "#" + anchor
* Der fixe Teil einer URL ist durch eine HTML-Seite und evtl. eine Id eines HTML-Elements (als Anchor) gegeben

* Der variable Teil ist die query, der text und der title
* Die query besteht aus Key-/Value-Paaren: param1name + "=" + param1value + "&" + param2name + "=" + param2value (usw...)
* Der text ist der angezeigte Wert eines Links auf eine URL
* Der title ist der angezeigte Wert eines Mouse-Overs eines Links auf eine URL

* Der variable Teil entsteht durch die Daten, die auf einer HTML-Seite angezeigt werden.
* Die query enthält die Datenbank-Ids des auf der HTML-Seite angezeigten DTOs
* Ist das DTO ein Geschäftsobjekt, wird nur dessen DB-ID verwendet: rootId=123
* Ist das DTO ein untergeordnetes Wertobjekt eines Geschäftsobjekts, wird dessen Pfad aus DB-IDs verwendet: rootId=123&subId1=12&subId2=47

* Ein mimic kann zwei Arten von Selbstreferenz erzeugen:
* Wenn das mimic aktuell zu einer HTML-Seite gehört, die mit einem DTO geladen ist, kann die Methode
    public MmReference getMmReference();
  die Selbstreferenz für dieses Mimic und dieses geladene DTO liefern

* Wenn die Referenz für ein anderes gegebenes DTO benötigt wird, kann ein mimic eine Selbstreferenz für dieses spezifische DTO liefern:
    public MmReference getMmReferenceForModel(DataTransferObject pModel);

* Damit ein MODEL einen variablen Teil einer Referenz liefern kann, muß es folgende Methoden implementieren:
  interface DataTransferObject
    public String getInfo();
    public DataTransferObject getParentDto();
    public List<Identifiable> getIdPath();
  Wenn das DTO selbst ein Geschäftsobjekt ist, muß es außerdem:
    interface Identifiable
      public Long getId();
  implementieren.

Pages and Views
* Eine Page hat eine oder mehrere Views

Ein Mimic1 kann auf ein Mimic2 verweisen
* Mimic1 gibt als TargetReference heraus: die Selbstreferenz von Mimic2 
* Bei einer Tabelle verweist ein Mimic einer TableRow auf ein Mimic vom Typ PageView
* Bei einem LeporelloTab verweist ein Mimic auf ein Mimic vom Typ PageView
* Bei einer Fehlermeldung verweist ein Mimic auf ein Input-Mimic
* 

* Jeder Service besitzt ein DTO model
* Jedem DTO model entspricht ein komplettes Leporello
* Jedem DTO und jeder Reference entspricht eine WebPage mit zwei (display, edit) oder drei (list, display, edit) PageViews
* Jeder list-PageView entspricht ein LeporelloPanel
* Jedem Paar display- und edit-PageView entspricht ein LeporelloPanel
* Tabellen (list-PageViews) sind immer readonly
* In Tabellenzellen können keine Eingaben gemacht werden, also können dort immer Links verwendet werden

* Einem Link wird als TargetReference ein Mimic2 gegeben
* Das Link verweist auf die Selbstreferenz des Mimic2
* Dem Link wird ein DTO gegeben, das Link übergibt seinem target Mimic2 dieses DTO und bekommt eine Selbstreferenz 